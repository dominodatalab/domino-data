# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.volumes_api import VolumesApi  # noqa: E501
from swagger_client.rest import ApiException


class TestVolumesApi(unittest.TestCase):
    """VolumesApi unit test stubs"""

    def setUp(self):
        self.api = VolumesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_account_authz_permissions_volumeid_post(self):
        """Test case for account_authz_permissions_volumeid_post

        Get if user has all provided volume permissions  # noqa: E501
        """
        pass

    def test_rpc_attach_volume_to_project_post(self):
        """Test case for rpc_attach_volume_to_project_post

        Attach volume to project  # noqa: E501
        """
        pass

    def test_rpc_check_is_over_limit_post(self):
        """Test case for rpc_check_is_over_limit_post

        Check whether requesting user is over allowed volume limit  # noqa: E501
        """
        pass

    def test_rpc_delete_volume_post(self):
        """Test case for rpc_delete_volume_post

        Delete volume by ID  # noqa: E501
        """
        pass

    def test_rpc_detach_volume_from_project_post(self):
        """Test case for rpc_detach_volume_from_project_post

        Detach volume from project  # noqa: E501
        """
        pass

    def test_rpc_get_volume_mounts_post(self):
        """Test case for rpc_get_volume_mounts_post

        Get volume mounts by project ID  # noqa: E501
        """
        pass

    def test_rpc_mark_volume_for_deletion_post(self):
        """Test case for rpc_mark_volume_for_deletion_post

        Mark volume for deletion  # noqa: E501
        """
        pass

    def test_rpc_restore_volume_post(self):
        """Test case for rpc_restore_volume_post

        Restore volume to active state  # noqa: E501
        """
        pass

    def test_staging_volume_get(self):
        """Test case for staging_volume_get

        Get domino staging volume name  # noqa: E501
        """
        pass

    def test_volumes_get(self):
        """Test case for volumes_get

        List volumes  # noqa: E501
        """
        pass

    def test_volumes_id_connection_snippets_get(self):
        """Test case for volumes_id_connection_snippets_get

        Get the connection snippets for a given volume to access as a datasource  # noqa: E501
        """
        pass

    def test_volumes_id_get(self):
        """Test case for volumes_id_get

        Get volume by ID  # noqa: E501
        """
        pass

    def test_volumes_id_grants_get(self):
        """Test case for volumes_id_grants_get

        Get grants by Volume ID  # noqa: E501
        """
        pass

    def test_volumes_id_grants_put(self):
        """Test case for volumes_id_grants_put

        Update grants by Volume ID  # noqa: E501
        """
        pass

    def test_volumes_id_patch(self):
        """Test case for volumes_id_patch

        Update Volume  # noqa: E501
        """
        pass

    def test_volumes_post(self):
        """Test case for volumes_post

        Create new volume  # noqa: E501
        """
        pass

    def test_volumes_unique_name_unique_name_get(self):
        """Test case for volumes_unique_name_unique_name_get

        Get a volume by unique name  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
