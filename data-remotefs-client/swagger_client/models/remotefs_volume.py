# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RemotefsVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'int',
        'created_at': 'str',
        'created_by': 'RemotefsUserSummary',
        'data_plane_id': 'str',
        'description': 'str',
        'filesystem_id': 'str',
        'filesystem_name': 'str',
        'grants': 'list[RemotefsVolumeGrant]',
        'id': 'str',
        'last_mounted_time': 'str',
        'max_snapshots': 'int',
        'name': 'str',
        'num_snapshots': 'int',
        'path': 'str',
        'projects': 'list[RemotefsProject]',
        'status': 'RemotefsResourceStatus',
        'storage_size': 'int',
        'unique_name': 'str',
        'updated_at': 'str',
        'updated_by': 'RemotefsUserSummary'
    }

    attribute_map = {
        'capacity': 'capacity',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'data_plane_id': 'dataPlaneId',
        'description': 'description',
        'filesystem_id': 'filesystemId',
        'filesystem_name': 'filesystemName',
        'grants': 'grants',
        'id': 'id',
        'last_mounted_time': 'lastMountedTime',
        'max_snapshots': 'maxSnapshots',
        'name': 'name',
        'num_snapshots': 'numSnapshots',
        'path': 'path',
        'projects': 'projects',
        'status': 'status',
        'storage_size': 'storageSize',
        'unique_name': 'uniqueName',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy'
    }

    def __init__(self, capacity=None, created_at=None, created_by=None, data_plane_id=None, description=None, filesystem_id=None, filesystem_name=None, grants=None, id=None, last_mounted_time=None, max_snapshots=None, name=None, num_snapshots=None, path=None, projects=None, status=None, storage_size=None, unique_name=None, updated_at=None, updated_by=None):  # noqa: E501
        """RemotefsVolume - a model defined in Swagger"""  # noqa: E501
        self._capacity = None
        self._created_at = None
        self._created_by = None
        self._data_plane_id = None
        self._description = None
        self._filesystem_id = None
        self._filesystem_name = None
        self._grants = None
        self._id = None
        self._last_mounted_time = None
        self._max_snapshots = None
        self._name = None
        self._num_snapshots = None
        self._path = None
        self._projects = None
        self._status = None
        self._storage_size = None
        self._unique_name = None
        self._updated_at = None
        self._updated_by = None
        self.discriminator = None
        self.capacity = capacity
        self.created_at = created_at
        self.created_by = created_by
        self.data_plane_id = data_plane_id
        if description is not None:
            self.description = description
        self.filesystem_id = filesystem_id
        if filesystem_name is not None:
            self.filesystem_name = filesystem_name
        if grants is not None:
            self.grants = grants
        self.id = id
        if last_mounted_time is not None:
            self.last_mounted_time = last_mounted_time
        self.max_snapshots = max_snapshots
        self.name = name
        self.num_snapshots = num_snapshots
        self.path = path
        if projects is not None:
            self.projects = projects
        self.status = status
        if storage_size is not None:
            self.storage_size = storage_size
        self.unique_name = unique_name
        self.updated_at = updated_at
        self.updated_by = updated_by

    @property
    def capacity(self):
        """Gets the capacity of this RemotefsVolume.  # noqa: E501

        Maximum size in bytes  # noqa: E501

        :return: The capacity of this RemotefsVolume.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this RemotefsVolume.

        Maximum size in bytes  # noqa: E501

        :param capacity: The capacity of this RemotefsVolume.  # noqa: E501
        :type: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def created_at(self):
        """Gets the created_at of this RemotefsVolume.  # noqa: E501


        :return: The created_at of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RemotefsVolume.


        :param created_at: The created_at of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this RemotefsVolume.  # noqa: E501


        :return: The created_by of this RemotefsVolume.  # noqa: E501
        :rtype: RemotefsUserSummary
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RemotefsVolume.


        :param created_by: The created_by of this RemotefsVolume.  # noqa: E501
        :type: RemotefsUserSummary
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def data_plane_id(self):
        """Gets the data_plane_id of this RemotefsVolume.  # noqa: E501


        :return: The data_plane_id of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._data_plane_id

    @data_plane_id.setter
    def data_plane_id(self, data_plane_id):
        """Sets the data_plane_id of this RemotefsVolume.


        :param data_plane_id: The data_plane_id of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if data_plane_id is None:
            raise ValueError("Invalid value for `data_plane_id`, must not be `None`")  # noqa: E501

        self._data_plane_id = data_plane_id

    @property
    def description(self):
        """Gets the description of this RemotefsVolume.  # noqa: E501


        :return: The description of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RemotefsVolume.


        :param description: The description of this RemotefsVolume.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filesystem_id(self):
        """Gets the filesystem_id of this RemotefsVolume.  # noqa: E501


        :return: The filesystem_id of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_id

    @filesystem_id.setter
    def filesystem_id(self, filesystem_id):
        """Sets the filesystem_id of this RemotefsVolume.


        :param filesystem_id: The filesystem_id of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if filesystem_id is None:
            raise ValueError("Invalid value for `filesystem_id`, must not be `None`")  # noqa: E501

        self._filesystem_id = filesystem_id

    @property
    def filesystem_name(self):
        """Gets the filesystem_name of this RemotefsVolume.  # noqa: E501


        :return: The filesystem_name of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_name

    @filesystem_name.setter
    def filesystem_name(self, filesystem_name):
        """Sets the filesystem_name of this RemotefsVolume.


        :param filesystem_name: The filesystem_name of this RemotefsVolume.  # noqa: E501
        :type: str
        """

        self._filesystem_name = filesystem_name

    @property
    def grants(self):
        """Gets the grants of this RemotefsVolume.  # noqa: E501


        :return: The grants of this RemotefsVolume.  # noqa: E501
        :rtype: list[RemotefsVolumeGrant]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this RemotefsVolume.


        :param grants: The grants of this RemotefsVolume.  # noqa: E501
        :type: list[RemotefsVolumeGrant]
        """

        self._grants = grants

    @property
    def id(self):
        """Gets the id of this RemotefsVolume.  # noqa: E501

        Links to ONTAP volume name  # noqa: E501

        :return: The id of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemotefsVolume.

        Links to ONTAP volume name  # noqa: E501

        :param id: The id of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_mounted_time(self):
        """Gets the last_mounted_time of this RemotefsVolume.  # noqa: E501


        :return: The last_mounted_time of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._last_mounted_time

    @last_mounted_time.setter
    def last_mounted_time(self, last_mounted_time):
        """Sets the last_mounted_time of this RemotefsVolume.


        :param last_mounted_time: The last_mounted_time of this RemotefsVolume.  # noqa: E501
        :type: str
        """

        self._last_mounted_time = last_mounted_time

    @property
    def max_snapshots(self):
        """Gets the max_snapshots of this RemotefsVolume.  # noqa: E501


        :return: The max_snapshots of this RemotefsVolume.  # noqa: E501
        :rtype: int
        """
        return self._max_snapshots

    @max_snapshots.setter
    def max_snapshots(self, max_snapshots):
        """Sets the max_snapshots of this RemotefsVolume.


        :param max_snapshots: The max_snapshots of this RemotefsVolume.  # noqa: E501
        :type: int
        """
        if max_snapshots is None:
            raise ValueError("Invalid value for `max_snapshots`, must not be `None`")  # noqa: E501

        self._max_snapshots = max_snapshots

    @property
    def name(self):
        """Gets the name of this RemotefsVolume.  # noqa: E501


        :return: The name of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemotefsVolume.


        :param name: The name of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def num_snapshots(self):
        """Gets the num_snapshots of this RemotefsVolume.  # noqa: E501


        :return: The num_snapshots of this RemotefsVolume.  # noqa: E501
        :rtype: int
        """
        return self._num_snapshots

    @num_snapshots.setter
    def num_snapshots(self, num_snapshots):
        """Sets the num_snapshots of this RemotefsVolume.


        :param num_snapshots: The num_snapshots of this RemotefsVolume.  # noqa: E501
        :type: int
        """
        if num_snapshots is None:
            raise ValueError("Invalid value for `num_snapshots`, must not be `None`")  # noqa: E501

        self._num_snapshots = num_snapshots

    @property
    def path(self):
        """Gets the path of this RemotefsVolume.  # noqa: E501


        :return: The path of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RemotefsVolume.


        :param path: The path of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def projects(self):
        """Gets the projects of this RemotefsVolume.  # noqa: E501


        :return: The projects of this RemotefsVolume.  # noqa: E501
        :rtype: list[RemotefsProject]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this RemotefsVolume.


        :param projects: The projects of this RemotefsVolume.  # noqa: E501
        :type: list[RemotefsProject]
        """

        self._projects = projects

    @property
    def status(self):
        """Gets the status of this RemotefsVolume.  # noqa: E501


        :return: The status of this RemotefsVolume.  # noqa: E501
        :rtype: RemotefsResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RemotefsVolume.


        :param status: The status of this RemotefsVolume.  # noqa: E501
        :type: RemotefsResourceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def storage_size(self):
        """Gets the storage_size of this RemotefsVolume.  # noqa: E501

        Used size in bytes  # noqa: E501

        :return: The storage_size of this RemotefsVolume.  # noqa: E501
        :rtype: int
        """
        return self._storage_size

    @storage_size.setter
    def storage_size(self, storage_size):
        """Sets the storage_size of this RemotefsVolume.

        Used size in bytes  # noqa: E501

        :param storage_size: The storage_size of this RemotefsVolume.  # noqa: E501
        :type: int
        """

        self._storage_size = storage_size

    @property
    def unique_name(self):
        """Gets the unique_name of this RemotefsVolume.  # noqa: E501


        :return: The unique_name of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this RemotefsVolume.


        :param unique_name: The unique_name of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if unique_name is None:
            raise ValueError("Invalid value for `unique_name`, must not be `None`")  # noqa: E501

        self._unique_name = unique_name

    @property
    def updated_at(self):
        """Gets the updated_at of this RemotefsVolume.  # noqa: E501


        :return: The updated_at of this RemotefsVolume.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RemotefsVolume.


        :param updated_at: The updated_at of this RemotefsVolume.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this RemotefsVolume.  # noqa: E501


        :return: The updated_by of this RemotefsVolume.  # noqa: E501
        :rtype: RemotefsUserSummary
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this RemotefsVolume.


        :param updated_by: The updated_by of this RemotefsVolume.  # noqa: E501
        :type: RemotefsUserSummary
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemotefsVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotefsVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
