# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerFilesystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_plane_id': 'str',
        'is_data_plane_default': 'bool',
        'max_snapshots_per_volume': 'int',
        'name': 'str',
        'root_pvc': 'str',
        'storage_class': 'str'
    }

    attribute_map = {
        'data_plane_id': 'dataPlaneId',
        'is_data_plane_default': 'isDataPlaneDefault',
        'max_snapshots_per_volume': 'maxSnapshotsPerVolume',
        'name': 'name',
        'root_pvc': 'rootPvc',
        'storage_class': 'storageClass'
    }

    def __init__(self, data_plane_id=None, is_data_plane_default=None, max_snapshots_per_volume=None, name=None, root_pvc=None, storage_class=None):  # noqa: E501
        """ServerFilesystem - a model defined in Swagger"""  # noqa: E501
        self._data_plane_id = None
        self._is_data_plane_default = None
        self._max_snapshots_per_volume = None
        self._name = None
        self._root_pvc = None
        self._storage_class = None
        self.discriminator = None
        self.data_plane_id = data_plane_id
        self.is_data_plane_default = is_data_plane_default
        if max_snapshots_per_volume is not None:
            self.max_snapshots_per_volume = max_snapshots_per_volume
        self.name = name
        self.root_pvc = root_pvc
        self.storage_class = storage_class

    @property
    def data_plane_id(self):
        """Gets the data_plane_id of this ServerFilesystem.  # noqa: E501


        :return: The data_plane_id of this ServerFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._data_plane_id

    @data_plane_id.setter
    def data_plane_id(self, data_plane_id):
        """Sets the data_plane_id of this ServerFilesystem.


        :param data_plane_id: The data_plane_id of this ServerFilesystem.  # noqa: E501
        :type: str
        """
        if data_plane_id is None:
            raise ValueError("Invalid value for `data_plane_id`, must not be `None`")  # noqa: E501

        self._data_plane_id = data_plane_id

    @property
    def is_data_plane_default(self):
        """Gets the is_data_plane_default of this ServerFilesystem.  # noqa: E501


        :return: The is_data_plane_default of this ServerFilesystem.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_plane_default

    @is_data_plane_default.setter
    def is_data_plane_default(self, is_data_plane_default):
        """Sets the is_data_plane_default of this ServerFilesystem.


        :param is_data_plane_default: The is_data_plane_default of this ServerFilesystem.  # noqa: E501
        :type: bool
        """
        if is_data_plane_default is None:
            raise ValueError("Invalid value for `is_data_plane_default`, must not be `None`")  # noqa: E501

        self._is_data_plane_default = is_data_plane_default

    @property
    def max_snapshots_per_volume(self):
        """Gets the max_snapshots_per_volume of this ServerFilesystem.  # noqa: E501


        :return: The max_snapshots_per_volume of this ServerFilesystem.  # noqa: E501
        :rtype: int
        """
        return self._max_snapshots_per_volume

    @max_snapshots_per_volume.setter
    def max_snapshots_per_volume(self, max_snapshots_per_volume):
        """Sets the max_snapshots_per_volume of this ServerFilesystem.


        :param max_snapshots_per_volume: The max_snapshots_per_volume of this ServerFilesystem.  # noqa: E501
        :type: int
        """

        self._max_snapshots_per_volume = max_snapshots_per_volume

    @property
    def name(self):
        """Gets the name of this ServerFilesystem.  # noqa: E501


        :return: The name of this ServerFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerFilesystem.


        :param name: The name of this ServerFilesystem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def root_pvc(self):
        """Gets the root_pvc of this ServerFilesystem.  # noqa: E501


        :return: The root_pvc of this ServerFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._root_pvc

    @root_pvc.setter
    def root_pvc(self, root_pvc):
        """Sets the root_pvc of this ServerFilesystem.


        :param root_pvc: The root_pvc of this ServerFilesystem.  # noqa: E501
        :type: str
        """
        if root_pvc is None:
            raise ValueError("Invalid value for `root_pvc`, must not be `None`")  # noqa: E501

        self._root_pvc = root_pvc

    @property
    def storage_class(self):
        """Gets the storage_class of this ServerFilesystem.  # noqa: E501


        :return: The storage_class of this ServerFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this ServerFilesystem.


        :param storage_class: The storage_class of this ServerFilesystem.  # noqa: E501
        :type: str
        """
        if storage_class is None:
            raise ValueError("Invalid value for `storage_class`, must not be `None`")  # noqa: E501

        self._storage_class = storage_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerFilesystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerFilesystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
