"""
    TrainingSet API

    XXX TODO  # noqa: E501

    The version of the OpenAPI document: 0.1.9
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.create_training_set_request import CreateTrainingSetRequest
from openapi_client.model.create_training_set_version_request import CreateTrainingSetVersionRequest
from openapi_client.model.training_set import TrainingSet
from openapi_client.model.training_set_version import TrainingSetVersion
from openapi_client.model.training_set_version_url import TrainingSetVersionUrl
from openapi_client.model.update_training_set_version_request import UpdateTrainingSetVersionRequest


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __id_training_set_id_get(
            self,
            training_set_id,
            **kwargs
        ):
            """Get TrainingSet by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.id_training_set_id_get(training_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_id (str): The TrainingSet id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_id'] = \
                training_set_id
            return self.call_with_http_info(**kwargs)

        self.id_training_set_id_get = _Endpoint(
            settings={
                'response_type': (TrainingSet,),
                'auth': [],
                'endpoint_path': '/id/{trainingSetId}',
                'operation_id': 'id_training_set_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_id',
                ],
                'required': [
                    'training_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_id':
                        (str,),
                },
                'attribute_map': {
                    'training_set_id': 'trainingSetId',
                },
                'location_map': {
                    'training_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__id_training_set_id_get
        )

        def __id_training_set_id_post(
            self,
            training_set_id,
            create_training_set_version_request,
            **kwargs
        ):
            """Create TrainingSetVersion  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.id_training_set_id_post(training_set_id, create_training_set_version_request, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_id (str): The TrainingSet id
                create_training_set_version_request (CreateTrainingSetVersionRequest): CreateTrainingSetVersionRequest

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSetVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_id'] = \
                training_set_id
            kwargs['create_training_set_version_request'] = \
                create_training_set_version_request
            return self.call_with_http_info(**kwargs)

        self.id_training_set_id_post = _Endpoint(
            settings={
                'response_type': (TrainingSetVersion,),
                'auth': [],
                'endpoint_path': '/id/{trainingSetId}',
                'operation_id': 'id_training_set_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_id',
                    'create_training_set_version_request',
                ],
                'required': [
                    'training_set_id',
                    'create_training_set_version_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_id':
                        (str,),
                    'create_training_set_version_request':
                        (CreateTrainingSetVersionRequest,),
                },
                'attribute_map': {
                    'training_set_id': 'trainingSetId',
                },
                'location_map': {
                    'training_set_id': 'path',
                    'create_training_set_version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__id_training_set_id_post
        )

        def __id_training_set_id_versions_get(
            self,
            training_set_id,
            **kwargs
        ):
            """Get TrainingSetVersions for a TrainingSet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.id_training_set_id_versions_get(training_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_id (str): The TrainingSet id

            Keyword Args:
                offset (int): offset. [optional]
                limit (int): limit. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TrainingSetVersion]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_id'] = \
                training_set_id
            return self.call_with_http_info(**kwargs)

        self.id_training_set_id_versions_get = _Endpoint(
            settings={
                'response_type': ([TrainingSetVersion],),
                'auth': [],
                'endpoint_path': '/id/{trainingSetId}/versions',
                'operation_id': 'id_training_set_id_versions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_id',
                    'offset',
                    'limit',
                ],
                'required': [
                    'training_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_id':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'training_set_id': 'trainingSetId',
                    'offset': 'offset',
                    'limit': 'limit',
                },
                'location_map': {
                    'training_set_id': 'path',
                    'offset': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__id_training_set_id_versions_get
        )

        def __name_name_get(
            self,
            name,
            **kwargs
        ):
            """Get TrainingSet by name  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.name_name_get(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): The TrainingSet name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.name_name_get = _Endpoint(
            settings={
                'response_type': (TrainingSet,),
                'auth': [],
                'endpoint_path': '/name/{name}',
                'operation_id': 'name_name_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__name_name_get
        )

        def __project_project_id_get(
            self,
            project_id,
            **kwargs
        ):
            """Get TrainingSets for project  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.project_project_id_get(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str): The Project id

            Keyword Args:
                offset (int): offset. [optional]
                limit (int): limit. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TrainingSet]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_id'] = \
                project_id
            return self.call_with_http_info(**kwargs)

        self.project_project_id_get = _Endpoint(
            settings={
                'response_type': ([TrainingSet],),
                'auth': [],
                'endpoint_path': '/project/{projectId}',
                'operation_id': 'project_project_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'offset',
                    'limit',
                ],
                'required': [
                    'project_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'project_id',
                ]
            },
            root_map={
                'validations': {
                    ('project_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'project_id': 'projectId',
                    'offset': 'offset',
                    'limit': 'limit',
                },
                'location_map': {
                    'project_id': 'path',
                    'offset': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__project_project_id_get
        )

        def __root_post(
            self,
            create_training_set_request,
            **kwargs
        ):
            """Create new TrainingSet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.root_post(create_training_set_request, async_req=True)
            >>> result = thread.get()

            Args:
                create_training_set_request (CreateTrainingSetRequest): CreateTrainingSetRequest

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_training_set_request'] = \
                create_training_set_request
            return self.call_with_http_info(**kwargs)

        self.root_post = _Endpoint(
            settings={
                'response_type': (TrainingSet,),
                'auth': [],
                'endpoint_path': '/',
                'operation_id': 'root_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_training_set_request',
                ],
                'required': [
                    'create_training_set_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_training_set_request':
                        (CreateTrainingSetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_training_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__root_post
        )

        def __version_training_set_version_id_download_url_get(
            self,
            training_set_version_id,
            **kwargs
        ):
            """Get pre-signed download URL  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.version_training_set_version_id_download_url_get(training_set_version_id, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_version_id (str): The TrainingSetVersion id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSetVersionUrl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_version_id'] = \
                training_set_version_id
            return self.call_with_http_info(**kwargs)

        self.version_training_set_version_id_download_url_get = _Endpoint(
            settings={
                'response_type': (TrainingSetVersionUrl,),
                'auth': [],
                'endpoint_path': '/version/{trainingSetVersionId}/downloadUrl',
                'operation_id': 'version_training_set_version_id_download_url_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_version_id',
                ],
                'required': [
                    'training_set_version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_version_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_version_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_version_id':
                        (str,),
                },
                'attribute_map': {
                    'training_set_version_id': 'trainingSetVersionId',
                },
                'location_map': {
                    'training_set_version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__version_training_set_version_id_download_url_get
        )

        def __version_training_set_version_id_get(
            self,
            training_set_version_id,
            **kwargs
        ):
            """Get TrainingSetVersion by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.version_training_set_version_id_get(training_set_version_id, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_version_id (str): The TrainingSetVersion id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSetVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_version_id'] = \
                training_set_version_id
            return self.call_with_http_info(**kwargs)

        self.version_training_set_version_id_get = _Endpoint(
            settings={
                'response_type': (TrainingSetVersion,),
                'auth': [],
                'endpoint_path': '/version/{trainingSetVersionId}',
                'operation_id': 'version_training_set_version_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_version_id',
                ],
                'required': [
                    'training_set_version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_version_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_version_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_version_id':
                        (str,),
                },
                'attribute_map': {
                    'training_set_version_id': 'trainingSetVersionId',
                },
                'location_map': {
                    'training_set_version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__version_training_set_version_id_get
        )

        def __version_training_set_version_id_put(
            self,
            training_set_version_id,
            update_training_set_version_request,
            **kwargs
        ):
            """Update TrainingSetVersion  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.version_training_set_version_id_put(training_set_version_id, update_training_set_version_request, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_version_id (str): The TrainingSetVersion id
                update_training_set_version_request (UpdateTrainingSetVersionRequest): UpdateTrainingSetRequest

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSetVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_version_id'] = \
                training_set_version_id
            kwargs['update_training_set_version_request'] = \
                update_training_set_version_request
            return self.call_with_http_info(**kwargs)

        self.version_training_set_version_id_put = _Endpoint(
            settings={
                'response_type': (TrainingSetVersion,),
                'auth': [],
                'endpoint_path': '/version/{trainingSetVersionId}',
                'operation_id': 'version_training_set_version_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_version_id',
                    'update_training_set_version_request',
                ],
                'required': [
                    'training_set_version_id',
                    'update_training_set_version_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_version_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_version_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_version_id':
                        (str,),
                    'update_training_set_version_request':
                        (UpdateTrainingSetVersionRequest,),
                },
                'attribute_map': {
                    'training_set_version_id': 'trainingSetVersionId',
                },
                'location_map': {
                    'training_set_version_id': 'path',
                    'update_training_set_version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__version_training_set_version_id_put
        )

        def __version_training_set_version_id_upload_url_get(
            self,
            training_set_version_id,
            **kwargs
        ):
            """Get pre-signed upload URL  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.version_training_set_version_id_upload_url_get(training_set_version_id, async_req=True)
            >>> result = thread.get()

            Args:
                training_set_version_id (str): The TrainingSetVersion id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TrainingSetVersionUrl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['training_set_version_id'] = \
                training_set_version_id
            return self.call_with_http_info(**kwargs)

        self.version_training_set_version_id_upload_url_get = _Endpoint(
            settings={
                'response_type': (TrainingSetVersionUrl,),
                'auth': [],
                'endpoint_path': '/version/{trainingSetVersionId}/uploadUrl',
                'operation_id': 'version_training_set_version_id_upload_url_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'training_set_version_id',
                ],
                'required': [
                    'training_set_version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'training_set_version_id',
                ]
            },
            root_map={
                'validations': {
                    ('training_set_version_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'training_set_version_id':
                        (str,),
                },
                'attribute_map': {
                    'training_set_version_id': 'trainingSetVersionId',
                },
                'location_map': {
                    'training_set_version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__version_training_set_version_id_upload_url_get
        )
