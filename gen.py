"""Generator for Datasource Enums and Config entities."""

import argparse
import re
from collections import defaultdict
from datetime import datetime

import yaml
from jinja2 import BaseLoader, Environment, Template


def snake_case(str):
    return re.sub(r"(?<!^)(?=[A-Z])", "_", str[:-1]).lower() + str[-1].lower()


def alias_or_name(alias, name):
    return alias if alias else name


env = Environment(loader=BaseLoader())
env.filters["snake_case"] = snake_case
env.filters["alias_or_name"] = alias_or_name

datasource_configs = {}
auth_configs = {}

cleaned_datasource_nickname = defaultdict(lambda: defaultdict(str))
cleaned_datasource_name = defaultdict(lambda: defaultdict(str))

cleaned_auth_nickname = defaultdict(lambda: defaultdict(str))
cleaned_auth_name = defaultdict(lambda: defaultdict(str))


GenMessage = env.from_string(
    '''"""Code generated by gen.py; DO NOT EDIT.
This file was generated by robots at
{{ timestamp }}"""'''
)

Enums = env.from_string(
    '''
from enum import Enum


class ConfigElem(Enum):
    """Enumeration of valid config elements."""

    {% for value in datasource_fields -%}
    {{ value | upper }} = "{{ value }}"
    {% endfor %}

class CredElem(Enum):
    """Enumeration of valid credential elements."""

    {% for value in auth_fields -%}
    {{ value | upper }} = "{{ value }}"
    {% endfor %}'''
)

Configs = env.from_string(
    '''
{% for config in datasource_configs -%}
@attr.s(auto_attribs=True)
class {{ config }}(Config):
    """{{ config }} datasource configuration."""

    {% for field_name in cleaned_datasource_name[config] -%}
        {{ cleaned_datasource_nickname[config][field_name] | snake_case }}: Optional[str] = _config(elem=ConfigElem.{{ cleaned_datasource_name[config][field_name] | upper}})
    {% endfor %}
    {% for name in cleaned_auth_name[config] -%}
        {{ cleaned_auth_nickname[config][name] | snake_case }}: Optional[str] = _cred(elem=CredElem.{{ cleaned_auth_name[config][name] | upper }})
    {% endfor %}

{% endfor %}
'''
)


def main(args):
    """Entrypoint for code generation."""

    with open(args.openapi, encoding="ascii") as openapi:
        schemas = yaml.load(openapi, Loader=yaml.FullLoader)["components"]["schemas"]

    with open(args.config, encoding="ascii") as config_file:
        configs = yaml.load(config_file, Loader=yaml.FullLoader)

    datasource_configs = configs["datasource_configs"]
    auth_configs = configs["auth_configs"]

    for config in datasource_configs:
        for field_name in datasource_configs[config]["fields"]:
            if datasource_configs[config]["fields"][field_name]["isOverridable"]:
                alias = datasource_configs[config]["fields"][field_name].get("alias")
                name = datasource_configs[config]["fields"][field_name].get("name")
                cleaned_datasource_nickname[config][field_name] = alias_or_name(alias, name)
                cleaned_datasource_name[config][field_name] = datasource_configs[config]["fields"][
                    field_name
                ].get("name")

    for config in datasource_configs:
        for auth_type in datasource_configs[config]["authTypes"]:
            for field_name in auth_configs[auth_type]["fields"]:
                if auth_configs[auth_type]["fields"][field_name]["isOverridable"]:
                    alias = auth_configs[auth_type]["fields"][field_name].get("alias")
                    name = auth_configs[auth_type]["fields"][field_name].get("name")
                    cleaned_auth_nickname[config][field_name] = alias_or_name(alias, name)
                    cleaned_auth_name[config][field_name] = auth_configs[auth_type]["fields"][
                        field_name
                    ].get("name")

    with open(args.file, "w", encoding="ascii") as gen:
        gen.write(env.get_template(GenMessage).render(timestamp=datetime.utcnow()))
        gen.write(
            env.get_template(Enums).render(
                auth_fields=schemas["AuthFieldName"]["enum"],
                datasource_fields=schemas["DatasourceFieldName"]["enum"],
            )
        )
        gen.write(
            env.get_template(Configs).render(
                datasource_configs=configs["datasource_configs"],
                cleaned_datasource_name=cleaned_datasource_name,
                cleaned_datasource_nickname=cleaned_datasource_nickname,
                cleaned_auth_name=cleaned_auth_name,
                cleaned_auth_nickname=cleaned_auth_nickname,
            ),
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--openapi",
        default="services/datasource/openapi.yaml",
    )
    parser.add_argument(
        "--config",
        default="services/datasource/config.yaml",
    )
    parser.add_argument(
        "--file",
        default="domino_data/configuration_gen.py",
    )
    main(parser.parse_args())
