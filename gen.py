"""Generator for Datasource Enums and Config entities."""

import argparse
from datetime import datetime

import yaml
from jinja2 import Template

GenMessage = Template(
    '''"""Code generated by gen.py; DO NOT EDIT.
This file was generated by robots at
{{ timestamp }}"""'''
)

Enums = Template(
    '''
from enum import Enum

class ConfigElem(Enum):
    """Enumeration of valid config elements."""

    {% for value in datasource_fields -%}
    {{ value | upper }} = "{{ value }}"
    {% endfor %}

class CredElem(Enum):
    """Enumeration of valid credential elements."""

    {% for value in auth_fields -%}
    {{ value | upper }} = "{{ value }}"
    {% endfor %}'''
)

Configs = Template(
    '''
{% for config in datasource_configs -%}
@attr.s(auto_attribs=True)
class {{ config }}(Config):
    """{{ config }} datasource configuration."""

    {% for field_name in datasource_configs[config]["fields"] -%}

    {{ datasource_configs[config]["fields"][field_name].name }}: Optional[str] = _config(elem=ConfigElem.)

    {% for a in auth_configs -%}
    {% for auth_field in auth_configs[a]["fields"]-%}
    {{ auth_configs[a]["fields"][auth_field].name }}
    {{ key }}: Optional[str] = _config(elem=ConfigElem.{{ value }})
    {% endfor %}
    {% endfor %}
    {% endfor %}
{% endfor %}
'''
)

def main(args):
    """Entrypoint for code generation."""
    with open(args.openapi, encoding="ascii") as openapi:
        schemas = yaml.load(openapi, Loader=yaml.FullLoader)["components"]["schemas"]

    with open(args.config, encoding="ascii") as config_file:
        configs = yaml.load(config_file, Loader=yaml.FullLoader)

    with open(args.file, "w", encoding="ascii") as gen:
        gen.write(GenMessage.render(timestamp=datetime.utcnow()))
        gen.write(
            Enums.render(
                auth_fields=schemas["AuthFieldName"]["enum"],
                datasource_fields=schemas["DatasourceFieldName"]["enum"],
            )
        )
        gen.write(
            Configs.render(
                datasource_configs=configs["datasource_configs"],
                auth_configs=configs["auth_configs"]
            ),
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--openapi",
        default="services/datasource/openapi.yaml",
    )
    parser.add_argument(
        "--config",
        default="services/datasource/config.yaml",
    )
    parser.add_argument(
        "--file",
        default="domino_data/configuration_gen.py",
    )
    main(parser.parse_args())
