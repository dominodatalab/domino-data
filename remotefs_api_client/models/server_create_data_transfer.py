# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerCreateDataTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_volume_id': 'str',
        'file_collision_setting': 'RemotefsFileCollisionSetting',
        'payload': 'str',
        'target_relative_path': 'str',
        'type': 'RemotefsDataTransferType'
    }

    attribute_map = {
        'destination_volume_id': 'destinationVolumeId',
        'file_collision_setting': 'fileCollisionSetting',
        'payload': 'payload',
        'target_relative_path': 'targetRelativePath',
        'type': 'type'
    }

    def __init__(self, destination_volume_id=None, file_collision_setting=None, payload=None, target_relative_path=None, type=None):  # noqa: E501
        """ServerCreateDataTransfer - a model defined in Swagger"""  # noqa: E501
        self._destination_volume_id = None
        self._file_collision_setting = None
        self._payload = None
        self._target_relative_path = None
        self._type = None
        self.discriminator = None
        self.destination_volume_id = destination_volume_id
        if file_collision_setting is not None:
            self.file_collision_setting = file_collision_setting
        if payload is not None:
            self.payload = payload
        if target_relative_path is not None:
            self.target_relative_path = target_relative_path
        self.type = type

    @property
    def destination_volume_id(self):
        """Gets the destination_volume_id of this ServerCreateDataTransfer.  # noqa: E501


        :return: The destination_volume_id of this ServerCreateDataTransfer.  # noqa: E501
        :rtype: str
        """
        return self._destination_volume_id

    @destination_volume_id.setter
    def destination_volume_id(self, destination_volume_id):
        """Sets the destination_volume_id of this ServerCreateDataTransfer.


        :param destination_volume_id: The destination_volume_id of this ServerCreateDataTransfer.  # noqa: E501
        :type: str
        """
        if destination_volume_id is None:
            raise ValueError("Invalid value for `destination_volume_id`, must not be `None`")  # noqa: E501

        self._destination_volume_id = destination_volume_id

    @property
    def file_collision_setting(self):
        """Gets the file_collision_setting of this ServerCreateDataTransfer.  # noqa: E501


        :return: The file_collision_setting of this ServerCreateDataTransfer.  # noqa: E501
        :rtype: RemotefsFileCollisionSetting
        """
        return self._file_collision_setting

    @file_collision_setting.setter
    def file_collision_setting(self, file_collision_setting):
        """Sets the file_collision_setting of this ServerCreateDataTransfer.


        :param file_collision_setting: The file_collision_setting of this ServerCreateDataTransfer.  # noqa: E501
        :type: RemotefsFileCollisionSetting
        """

        self._file_collision_setting = file_collision_setting

    @property
    def payload(self):
        """Gets the payload of this ServerCreateDataTransfer.  # noqa: E501


        :return: The payload of this ServerCreateDataTransfer.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ServerCreateDataTransfer.


        :param payload: The payload of this ServerCreateDataTransfer.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def target_relative_path(self):
        """Gets the target_relative_path of this ServerCreateDataTransfer.  # noqa: E501


        :return: The target_relative_path of this ServerCreateDataTransfer.  # noqa: E501
        :rtype: str
        """
        return self._target_relative_path

    @target_relative_path.setter
    def target_relative_path(self, target_relative_path):
        """Sets the target_relative_path of this ServerCreateDataTransfer.


        :param target_relative_path: The target_relative_path of this ServerCreateDataTransfer.  # noqa: E501
        :type: str
        """

        self._target_relative_path = target_relative_path

    @property
    def type(self):
        """Gets the type of this ServerCreateDataTransfer.  # noqa: E501


        :return: The type of this ServerCreateDataTransfer.  # noqa: E501
        :rtype: RemotefsDataTransferType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerCreateDataTransfer.


        :param type: The type of this ServerCreateDataTransfer.  # noqa: E501
        :type: RemotefsDataTransferType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerCreateDataTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerCreateDataTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
