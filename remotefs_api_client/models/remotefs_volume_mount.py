# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RemotefsVolumeMount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "can_user_write": "bool",
        "name": "str",
        "persistent_volume_claim_name": "str",
        "snapshot_sub_path": "str",
        "sub_path": "str",
        "volume_id": "str",
    }

    attribute_map = {
        "can_user_write": "canUserWrite",
        "name": "name",
        "persistent_volume_claim_name": "persistentVolumeClaimName",
        "snapshot_sub_path": "snapshotSubPath",
        "sub_path": "subPath",
        "volume_id": "volumeId",
    }

    def __init__(
        self,
        can_user_write=None,
        name=None,
        persistent_volume_claim_name=None,
        snapshot_sub_path=None,
        sub_path=None,
        volume_id=None,
    ):  # noqa: E501
        """RemotefsVolumeMount - a model defined in Swagger"""  # noqa: E501
        self._can_user_write = None
        self._name = None
        self._persistent_volume_claim_name = None
        self._snapshot_sub_path = None
        self._sub_path = None
        self._volume_id = None
        self.discriminator = None
        self.can_user_write = can_user_write
        self.name = name
        self.persistent_volume_claim_name = persistent_volume_claim_name
        self.snapshot_sub_path = snapshot_sub_path
        self.sub_path = sub_path
        self.volume_id = volume_id

    @property
    def can_user_write(self):
        """Gets the can_user_write of this RemotefsVolumeMount.  # noqa: E501


        :return: The can_user_write of this RemotefsVolumeMount.  # noqa: E501
        :rtype: bool
        """
        return self._can_user_write

    @can_user_write.setter
    def can_user_write(self, can_user_write):
        """Sets the can_user_write of this RemotefsVolumeMount.


        :param can_user_write: The can_user_write of this RemotefsVolumeMount.  # noqa: E501
        :type: bool
        """
        if can_user_write is None:
            raise ValueError("Invalid value for `can_user_write`, must not be `None`")  # noqa: E501

        self._can_user_write = can_user_write

    @property
    def name(self):
        """Gets the name of this RemotefsVolumeMount.  # noqa: E501


        :return: The name of this RemotefsVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemotefsVolumeMount.


        :param name: The name of this RemotefsVolumeMount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def persistent_volume_claim_name(self):
        """Gets the persistent_volume_claim_name of this RemotefsVolumeMount.  # noqa: E501


        :return: The persistent_volume_claim_name of this RemotefsVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._persistent_volume_claim_name

    @persistent_volume_claim_name.setter
    def persistent_volume_claim_name(self, persistent_volume_claim_name):
        """Sets the persistent_volume_claim_name of this RemotefsVolumeMount.


        :param persistent_volume_claim_name: The persistent_volume_claim_name of this RemotefsVolumeMount.  # noqa: E501
        :type: str
        """
        if persistent_volume_claim_name is None:
            raise ValueError(
                "Invalid value for `persistent_volume_claim_name`, must not be `None`"
            )  # noqa: E501

        self._persistent_volume_claim_name = persistent_volume_claim_name

    @property
    def snapshot_sub_path(self):
        """Gets the snapshot_sub_path of this RemotefsVolumeMount.  # noqa: E501


        :return: The snapshot_sub_path of this RemotefsVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_sub_path

    @snapshot_sub_path.setter
    def snapshot_sub_path(self, snapshot_sub_path):
        """Sets the snapshot_sub_path of this RemotefsVolumeMount.


        :param snapshot_sub_path: The snapshot_sub_path of this RemotefsVolumeMount.  # noqa: E501
        :type: str
        """
        if snapshot_sub_path is None:
            raise ValueError(
                "Invalid value for `snapshot_sub_path`, must not be `None`"
            )  # noqa: E501

        self._snapshot_sub_path = snapshot_sub_path

    @property
    def sub_path(self):
        """Gets the sub_path of this RemotefsVolumeMount.  # noqa: E501


        :return: The sub_path of this RemotefsVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this RemotefsVolumeMount.


        :param sub_path: The sub_path of this RemotefsVolumeMount.  # noqa: E501
        :type: str
        """
        if sub_path is None:
            raise ValueError("Invalid value for `sub_path`, must not be `None`")  # noqa: E501

        self._sub_path = sub_path

    @property
    def volume_id(self):
        """Gets the volume_id of this RemotefsVolumeMount.  # noqa: E501


        :return: The volume_id of this RemotefsVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this RemotefsVolumeMount.


        :param volume_id: The volume_id of this RemotefsVolumeMount.  # noqa: E501
        :type: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RemotefsVolumeMount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotefsVolumeMount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
