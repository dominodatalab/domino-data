# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServerListVolumeMountsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "data_plane_ids": "list[str]",
        "project_ids": "list[str]",
        "volume_ids": "list[str]",
    }

    attribute_map = {
        "data_plane_ids": "dataPlaneIds",
        "project_ids": "projectIds",
        "volume_ids": "volumeIds",
    }

    def __init__(self, data_plane_ids=None, project_ids=None, volume_ids=None):  # noqa: E501
        """ServerListVolumeMountsRequest - a model defined in Swagger"""  # noqa: E501
        self._data_plane_ids = None
        self._project_ids = None
        self._volume_ids = None
        self.discriminator = None
        if data_plane_ids is not None:
            self.data_plane_ids = data_plane_ids
        self.project_ids = project_ids
        if volume_ids is not None:
            self.volume_ids = volume_ids

    @property
    def data_plane_ids(self):
        """Gets the data_plane_ids of this ServerListVolumeMountsRequest.  # noqa: E501


        :return: The data_plane_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_plane_ids

    @data_plane_ids.setter
    def data_plane_ids(self, data_plane_ids):
        """Sets the data_plane_ids of this ServerListVolumeMountsRequest.


        :param data_plane_ids: The data_plane_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :type: list[str]
        """

        self._data_plane_ids = data_plane_ids

    @property
    def project_ids(self):
        """Gets the project_ids of this ServerListVolumeMountsRequest.  # noqa: E501


        :return: The project_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this ServerListVolumeMountsRequest.


        :param project_ids: The project_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :type: list[str]
        """
        if project_ids is None:
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    @property
    def volume_ids(self):
        """Gets the volume_ids of this ServerListVolumeMountsRequest.  # noqa: E501


        :return: The volume_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._volume_ids

    @volume_ids.setter
    def volume_ids(self, volume_ids):
        """Sets the volume_ids of this ServerListVolumeMountsRequest.


        :param volume_ids: The volume_ids of this ServerListVolumeMountsRequest.  # noqa: E501
        :type: list[str]
        """

        self._volume_ids = volume_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ServerListVolumeMountsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerListVolumeMountsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
