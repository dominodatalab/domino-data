# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RemotefsMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "filters": "list[RemotefsFilter]",
        "order": "str",
        "pagination": "RemotefsPagination",
        "search": "str",
        "sort_by": "str",
    }

    attribute_map = {
        "filters": "filters",
        "order": "order",
        "pagination": "pagination",
        "search": "search",
        "sort_by": "sortBy",
    }

    def __init__(
        self, filters=None, order=None, pagination=None, search=None, sort_by=None
    ):  # noqa: E501
        """RemotefsMeta - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._order = None
        self._pagination = None
        self._search = None
        self._sort_by = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if order is not None:
            self.order = order
        if pagination is not None:
            self.pagination = pagination
        if search is not None:
            self.search = search
        if sort_by is not None:
            self.sort_by = sort_by

    @property
    def filters(self):
        """Gets the filters of this RemotefsMeta.  # noqa: E501


        :return: The filters of this RemotefsMeta.  # noqa: E501
        :rtype: list[RemotefsFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RemotefsMeta.


        :param filters: The filters of this RemotefsMeta.  # noqa: E501
        :type: list[RemotefsFilter]
        """

        self._filters = filters

    @property
    def order(self):
        """Gets the order of this RemotefsMeta.  # noqa: E501


        :return: The order of this RemotefsMeta.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this RemotefsMeta.


        :param order: The order of this RemotefsMeta.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def pagination(self):
        """Gets the pagination of this RemotefsMeta.  # noqa: E501


        :return: The pagination of this RemotefsMeta.  # noqa: E501
        :rtype: RemotefsPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this RemotefsMeta.


        :param pagination: The pagination of this RemotefsMeta.  # noqa: E501
        :type: RemotefsPagination
        """

        self._pagination = pagination

    @property
    def search(self):
        """Gets the search of this RemotefsMeta.  # noqa: E501


        :return: The search of this RemotefsMeta.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this RemotefsMeta.


        :param search: The search of this RemotefsMeta.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def sort_by(self):
        """Gets the sort_by of this RemotefsMeta.  # noqa: E501


        :return: The sort_by of this RemotefsMeta.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this RemotefsMeta.


        :param sort_by: The sort_by of this RemotefsMeta.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RemotefsMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotefsMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
