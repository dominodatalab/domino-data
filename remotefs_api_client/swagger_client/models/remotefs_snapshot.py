# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RemotefsSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "created_at": "str",
        "created_by": "RemotefsUserSummary",
        "description": "str",
        "id": "str",
        "labels": "dict(str, str)",
        "last_mounted_time": "str",
        "run_id": "str",
        "status": "RemotefsResourceStatus",
        "updated_at": "str",
        "updated_by": "RemotefsUserSummary",
        "version": "int",
        "volume_id": "str",
    }

    attribute_map = {
        "created_at": "createdAt",
        "created_by": "createdBy",
        "description": "description",
        "id": "id",
        "labels": "labels",
        "last_mounted_time": "lastMountedTime",
        "run_id": "runId",
        "status": "status",
        "updated_at": "updatedAt",
        "updated_by": "updatedBy",
        "version": "version",
        "volume_id": "volumeId",
    }

    def __init__(
        self,
        created_at=None,
        created_by=None,
        description=None,
        id=None,
        labels=None,
        last_mounted_time=None,
        run_id=None,
        status=None,
        updated_at=None,
        updated_by=None,
        version=None,
        volume_id=None,
    ):  # noqa: E501
        """RemotefsSnapshot - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._description = None
        self._id = None
        self._labels = None
        self._last_mounted_time = None
        self._run_id = None
        self._status = None
        self._updated_at = None
        self._updated_by = None
        self._version = None
        self._volume_id = None
        self.discriminator = None
        self.created_at = created_at
        self.created_by = created_by
        if description is not None:
            self.description = description
        self.id = id
        if labels is not None:
            self.labels = labels
        if last_mounted_time is not None:
            self.last_mounted_time = last_mounted_time
        if run_id is not None:
            self.run_id = run_id
        self.status = status
        self.updated_at = updated_at
        self.updated_by = updated_by
        self.version = version
        self.volume_id = volume_id

    @property
    def created_at(self):
        """Gets the created_at of this RemotefsSnapshot.  # noqa: E501


        :return: The created_at of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RemotefsSnapshot.


        :param created_at: The created_at of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this RemotefsSnapshot.  # noqa: E501


        :return: The created_by of this RemotefsSnapshot.  # noqa: E501
        :rtype: RemotefsUserSummary
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RemotefsSnapshot.


        :param created_by: The created_by of this RemotefsSnapshot.  # noqa: E501
        :type: RemotefsUserSummary
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this RemotefsSnapshot.  # noqa: E501


        :return: The description of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RemotefsSnapshot.


        :param description: The description of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this RemotefsSnapshot.  # noqa: E501


        :return: The id of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemotefsSnapshot.


        :param id: The id of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this RemotefsSnapshot.  # noqa: E501


        :return: The labels of this RemotefsSnapshot.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RemotefsSnapshot.


        :param labels: The labels of this RemotefsSnapshot.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def last_mounted_time(self):
        """Gets the last_mounted_time of this RemotefsSnapshot.  # noqa: E501


        :return: The last_mounted_time of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._last_mounted_time

    @last_mounted_time.setter
    def last_mounted_time(self, last_mounted_time):
        """Sets the last_mounted_time of this RemotefsSnapshot.


        :param last_mounted_time: The last_mounted_time of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """

        self._last_mounted_time = last_mounted_time

    @property
    def run_id(self):
        """Gets the run_id of this RemotefsSnapshot.  # noqa: E501

        Optional field denoting resource associated with a run  # noqa: E501

        :return: The run_id of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RemotefsSnapshot.

        Optional field denoting resource associated with a run  # noqa: E501

        :param run_id: The run_id of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def status(self):
        """Gets the status of this RemotefsSnapshot.  # noqa: E501


        :return: The status of this RemotefsSnapshot.  # noqa: E501
        :rtype: RemotefsResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RemotefsSnapshot.


        :param status: The status of this RemotefsSnapshot.  # noqa: E501
        :type: RemotefsResourceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this RemotefsSnapshot.  # noqa: E501


        :return: The updated_at of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RemotefsSnapshot.


        :param updated_at: The updated_at of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this RemotefsSnapshot.  # noqa: E501


        :return: The updated_by of this RemotefsSnapshot.  # noqa: E501
        :rtype: RemotefsUserSummary
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this RemotefsSnapshot.


        :param updated_by: The updated_by of this RemotefsSnapshot.  # noqa: E501
        :type: RemotefsUserSummary
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def version(self):
        """Gets the version of this RemotefsSnapshot.  # noqa: E501

        Links to ONTAP snapshot name  # noqa: E501

        :return: The version of this RemotefsSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RemotefsSnapshot.

        Links to ONTAP snapshot name  # noqa: E501

        :param version: The version of this RemotefsSnapshot.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def volume_id(self):
        """Gets the volume_id of this RemotefsSnapshot.  # noqa: E501


        :return: The volume_id of this RemotefsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this RemotefsSnapshot.


        :param volume_id: The volume_id of this RemotefsSnapshot.  # noqa: E501
        :type: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RemotefsSnapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotefsSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
