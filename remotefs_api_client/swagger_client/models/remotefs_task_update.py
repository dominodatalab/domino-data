# coding: utf-8

"""
    Domino Volumes for NetApp ONTAP Microservice API

    Microservice responsible for managing Domino Volumes for NetApp ONTAP feature  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@dominodatalab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RemotefsTaskUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "export_target_id": "str",
        "key": "RemotefsFlowsArtifactVersionKey",
        "progress": "int",
        "tags": "dict(str, str)",
        "type": "str",
        "uri": "str",
    }

    attribute_map = {
        "export_target_id": "exportTargetId",
        "key": "key",
        "progress": "progress",
        "tags": "tags",
        "type": "type",
        "uri": "uri",
    }

    def __init__(
        self, export_target_id=None, key=None, progress=None, tags=None, type=None, uri=None
    ):  # noqa: E501
        """RemotefsTaskUpdate - a model defined in Swagger"""  # noqa: E501
        self._export_target_id = None
        self._key = None
        self._progress = None
        self._tags = None
        self._type = None
        self._uri = None
        self.discriminator = None
        if export_target_id is not None:
            self.export_target_id = export_target_id
        if key is not None:
            self.key = key
        if progress is not None:
            self.progress = progress
        if tags is not None:
            self.tags = tags
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def export_target_id(self):
        """Gets the export_target_id of this RemotefsTaskUpdate.  # noqa: E501


        :return: The export_target_id of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: str
        """
        return self._export_target_id

    @export_target_id.setter
    def export_target_id(self, export_target_id):
        """Sets the export_target_id of this RemotefsTaskUpdate.


        :param export_target_id: The export_target_id of this RemotefsTaskUpdate.  # noqa: E501
        :type: str
        """

        self._export_target_id = export_target_id

    @property
    def key(self):
        """Gets the key of this RemotefsTaskUpdate.  # noqa: E501


        :return: The key of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: RemotefsFlowsArtifactVersionKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RemotefsTaskUpdate.


        :param key: The key of this RemotefsTaskUpdate.  # noqa: E501
        :type: RemotefsFlowsArtifactVersionKey
        """

        self._key = key

    @property
    def progress(self):
        """Gets the progress of this RemotefsTaskUpdate.  # noqa: E501


        :return: The progress of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RemotefsTaskUpdate.


        :param progress: The progress of this RemotefsTaskUpdate.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def tags(self):
        """Gets the tags of this RemotefsTaskUpdate.  # noqa: E501


        :return: The tags of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RemotefsTaskUpdate.


        :param tags: The tags of this RemotefsTaskUpdate.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this RemotefsTaskUpdate.  # noqa: E501


        :return: The type of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemotefsTaskUpdate.


        :param type: The type of this RemotefsTaskUpdate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this RemotefsTaskUpdate.  # noqa: E501


        :return: The uri of this RemotefsTaskUpdate.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RemotefsTaskUpdate.


        :param uri: The uri of this RemotefsTaskUpdate.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RemotefsTaskUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotefsTaskUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
